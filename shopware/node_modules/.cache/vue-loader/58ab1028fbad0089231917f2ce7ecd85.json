{"remainingRequest":"C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\src\\views\\Product.vue?vue&type=template&id=35171425&","dependencies":[{"path":"C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\src\\views\\Product.vue","mtime":1586447161039},{"path":"C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User-9100\\Documents\\Front-end\\Angular.js and Vue.js\\Lesson 13\\shopware\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF92bS5wcm9kdWN0CiAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIG15LTUgcHktNSB6LWRlcHRoLTEiIH0sIFsKICAgICAgICBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImZvbnQtd2VpZ2h0LWJvbGQgbWItNSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIlByb2R1a3RpbmZvcm1hdGlvbiIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTYiIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiY2Fyb3VzZWwgc2xpZGUgY2Fyb3VzZWwtZmFkZSBjYXJvdXNlbC10aHVtYm5haWxzIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJjYXJvdXNlbC10aHVtYiIsICJkYXRhLXJpZGUiOiAiY2Fyb3VzZWwiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtaW5uZXIgdGV4dC1jZW50ZXIgdGV4dC1tZC1sZWZ0IiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJsaXN0Ym94IiB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcm91c2VsLWl0ZW0gYWN0aXZlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLnByb2R1Y3QucHJvZHVjdEltYWdlLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfdm0uX20oMCksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTUgdGV4dC1jZW50ZXIgdGV4dC1tZC1sZWZ0IiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiaDIiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiaDItcmVzcG9uc2l2ZSB0ZXh0LWNlbnRlciB0ZXh0LW1kLWxlZnQgcHJvZHVjdC1uYW1lIGZvbnQtd2VpZ2h0LWJvbGQgZGFyay1ncmV5LXRleHQgbWItMSBtbC14bC0wIG1sLTQiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW19jKCJzdHJvbmciLCBbX3ZtLl92KF92bS5fcyhfdm0ucHJvZHVjdC5uYW1lKSldKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImJhZGdlIGJhZGdlLWRhbmdlciBwcm9kdWN0IG1iLTQgbWwteGwtMCBtbC00IiB9LAogICAgICAgICAgICAgICAgW192bS5fdigiYmVzdHNlbGxlciIpXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiaDMiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAiaDMtcmVzcG9uc2l2ZSB0ZXh0LWNlbnRlciB0ZXh0LW1kLWxlZnQgbWItNSBtbC14bC0wIG1sLTQiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyZWQtdGV4dCBmb250LXdlaWdodC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoX3ZtLl9zKF92bS5wcm9kdWN0LnByaWNlKSArICIgU0VLIildKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhY2NvcmRpb24gbWQtYWNjb3JkaW9uIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogImFjY29yZGlvbkV4IiwKICAgICAgICAgICAgICAgICAgICByb2xlOiAidGFibGlzdCIsCiAgICAgICAgICAgICAgICAgICAgImFyaWEtbXVsdGlzZWxlY3RhYmxlIjogInRydWUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxhcHNlIHNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiY29sbGFwc2VPbmUxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiAidGFicGFuZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWxhYmVsbGVkYnkiOiAiaGVhZGluZ09uZTEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXBhcmVudCI6ICIjYWNjb3JkaW9uRXgiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0ucHJvZHVjdC5kZXNjcmlwdGlvbikgKyAiICIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDMpLAogICAgICAgICAgICAgICAgICBfdm0uX20oNCkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImNvbG9yIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm10LTUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiZ3JleS10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDaG9vc2UgeW91ciBjb2xvciIpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfdm0uX20oNSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IG10LTMiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAiY29sLW1kLTEyIHRleHQtY2VudGVyIHRleHQtbWQtbGVmdCB0ZXh0LW1kLXJpZ2h0IgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkgYnRuLXJvdW5kZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uYWRkUHJvZHVjdFRvQ2FydCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0OiBfdm0ucHJvZHVjdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiBfdm0ucXVhbnRpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYXMgZmEtY2FydC1wbHVzIG1yLTIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBMw6RnZyB0aWxsIHZhcnVrb3JnZW4iKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIDogX3ZtLl9lKCkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJhIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtY29udHJvbC1wcmV2IiwKICAgICAgICBhdHRyczogeyBocmVmOiAiI2Nhcm91c2VsLXRodW1iIiwgcm9sZTogImJ1dHRvbiIsICJkYXRhLXNsaWRlIjogInByZXYiIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJvdXNlbC1jb250cm9sLXByZXYtaWNvbiIsCiAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgIH0pLAogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInNyLW9ubHkiIH0sIFtfdm0uX3YoIlByZXZpb3VzIildKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiYSIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogImNhcm91c2VsLWNvbnRyb2wtbmV4dCIsCiAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjYXJvdXNlbC10aHVtYiIsIHJvbGU6ICJidXR0b24iLCAiZGF0YS1zbGlkZSI6ICJuZXh0IiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb24iLAogICAgICAgICAgYXR0cnM6IHsgImFyaWEtaGlkZGVuIjogInRydWUiIH0KICAgICAgICB9KSwKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJzci1vbmx5IiB9LCBbX3ZtLl92KCJOZXh0IildKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgeyBzdGF0aWNDbGFzczogImNhcmQtaGVhZGVyIiwgYXR0cnM6IHsgcm9sZTogInRhYiIsIGlkOiAiaGVhZGluZ09uZTEiIH0gfSwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICJkYXRhLXRvZ2dsZSI6ICJjb2xsYXBzZSIsCiAgICAgICAgICAgICAgImRhdGEtcGFyZW50IjogIiNhY2NvcmRpb25FeCIsCiAgICAgICAgICAgICAgaHJlZjogIiNjb2xsYXBzZU9uZTEiLAogICAgICAgICAgICAgICJhcmlhLWV4cGFuZGVkIjogInRydWUiLAogICAgICAgICAgICAgICJhcmlhLWNvbnRyb2xzIjogImNvbGxhcHNlT25lMSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogIm1iLTAiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBEZXNjcmlwdGlvbiAiKSwKICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtYW5nbGUtZG93biByb3RhdGUtaWNvbiIgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1oZWFkZXIiLAogICAgICAgICAgYXR0cnM6IHsgcm9sZTogInRhYiIsIGlkOiAiaGVhZGluZ1R3bzIiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxhcHNlZCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICJkYXRhLXRvZ2dsZSI6ICJjb2xsYXBzZSIsCiAgICAgICAgICAgICAgICAiZGF0YS1wYXJlbnQiOiAiI2FjY29yZGlvbkV4IiwKICAgICAgICAgICAgICAgIGhyZWY6ICIjY29sbGFwc2VUd28yIiwKICAgICAgICAgICAgICAgICJhcmlhLWV4cGFuZGVkIjogImZhbHNlIiwKICAgICAgICAgICAgICAgICJhcmlhLWNvbnRyb2xzIjogImNvbGxhcHNlVHdvMiIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAibWItMCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgRGV0YWlscyAiKSwKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1hbmdsZS1kb3duIHJvdGF0ZS1pY29uIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sbGFwc2UiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJjb2xsYXBzZVR3bzIiLAogICAgICAgICAgICByb2xlOiAidGFicGFuZWwiLAogICAgICAgICAgICAiYXJpYS1sYWJlbGxlZGJ5IjogImhlYWRpbmdUd28yIiwKICAgICAgICAgICAgImRhdGEtcGFyZW50IjogIiNhY2NvcmRpb25FeCIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEFuaW0gcGFyaWF0dXIgY2xpY2hlIHJlcHJlaGVuZGVyaXQsIGVuaW0gZWl1c21vZCBoaWdoIGxpZmUgYWNjdXNhbXVzIHRlcnJ5IHJpY2hhcmRzb24gYWQgc3F1aWQuIDMgd29sZiBtb29uIG9mZmljaWEgYXV0ZSwgbm9uIGN1cGlkYXRhdCBza2F0ZWJvYXJkIGRvbG9yIGJydW5jaC4gRm9vZCB0cnVjayBxdWlub2EgbmVzY2l1bnQgbGFib3J1bSBlaXVzbW9kLiBCcnVuY2ggMyB3b2xmIG1vb24gdGVtcG9yLCBzdW50IGFsaXF1YSBwdXQgYSBiaXJkIG9uIGl0IHNxdWlkIHNpbmdsZS1vcmlnaW4gY29mZmVlIG51bGxhIGFzc3VtZW5kYSBzaG9yZWRpdGNoIGV0LiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJjYXJkLWhlYWRlciIsCiAgICAgICAgICBhdHRyczogeyByb2xlOiAidGFiIiwgaWQ6ICJoZWFkaW5nVGhyZWUzIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2xsYXBzZWQiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAiZGF0YS10b2dnbGUiOiAiY29sbGFwc2UiLAogICAgICAgICAgICAgICAgImRhdGEtcGFyZW50IjogIiNhY2NvcmRpb25FeCIsCiAgICAgICAgICAgICAgICBocmVmOiAiI2NvbGxhcHNlVGhyZWUzIiwKICAgICAgICAgICAgICAgICJhcmlhLWV4cGFuZGVkIjogImZhbHNlIiwKICAgICAgICAgICAgICAgICJhcmlhLWNvbnRyb2xzIjogImNvbGxhcHNlVGhyZWUzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJtYi0wIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBTaGlwcGluZyAiKSwKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1hbmdsZS1kb3duIHJvdGF0ZS1pY29uIiB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sbGFwc2UiLAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJjb2xsYXBzZVRocmVlMyIsCiAgICAgICAgICAgIHJvbGU6ICJ0YWJwYW5lbCIsCiAgICAgICAgICAgICJhcmlhLWxhYmVsbGVkYnkiOiAiaGVhZGluZ1RocmVlMyIsCiAgICAgICAgICAgICJkYXRhLXBhcmVudCI6ICIjYWNjb3JkaW9uRXgiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBBbmltIHBhcmlhdHVyIGNsaWNoZSByZXByZWhlbmRlcml0LCBlbmltIGVpdXNtb2QgaGlnaCBsaWZlIGFjY3VzYW11cyB0ZXJyeSByaWNoYXJkc29uIGFkIHNxdWlkLiAzIHdvbGYgbW9vbiBvZmZpY2lhIGF1dGUsIG5vbiBjdXBpZGF0YXQgc2thdGVib2FyZCBkb2xvciBicnVuY2guIEZvb2QgdHJ1Y2sgcXVpbm9hIG5lc2NpdW50IGxhYm9ydW0gZWl1c21vZC4gQnJ1bmNoIDMgd29sZiBtb29uIHRlbXBvciwgc3VudCBhbGlxdWEgcHV0IGEgYmlyZCBvbiBpdCBzcXVpZCBzaW5nbGUtb3JpZ2luIGNvZmZlZSBudWxsYSBhc3N1bWVuZGEgc2hvcmVkaXRjaCBldC4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgdGV4dC1jZW50ZXIgdGV4dC1tZC1sZWZ0IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQgY29sLTEyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jaGVjay1pbnB1dCIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgbmFtZTogImdyb3VwMTAwIiwKICAgICAgICAgICAgICB0eXBlOiAicmFkaW8iLAogICAgICAgICAgICAgIGlkOiAicmFkaW8xMDAiLAogICAgICAgICAgICAgIGNoZWNrZWQ6ICJjaGVja2VkIgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAibGFiZWwiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNoZWNrLWxhYmVsIGRhcmstZ3JleS10ZXh0IiwKICAgICAgICAgICAgICBhdHRyczogeyBmb3I6ICJyYWRpbzEwMCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJCbHVlIildCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiIH0sIFsKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNoZWNrLWlucHV0IiwKICAgICAgICAgICAgYXR0cnM6IHsgbmFtZTogImdyb3VwMTAwIiwgdHlwZTogInJhZGlvIiwgaWQ6ICJyYWRpbzEwMSIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jaGVjay1sYWJlbCBkYXJrLWdyZXktdGV4dCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgZm9yOiAicmFkaW8xMDEiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiT3JhbmdlIildCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiIH0sIFsKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNoZWNrLWlucHV0IiwKICAgICAgICAgICAgYXR0cnM6IHsgbmFtZTogImdyb3VwMTAwIiwgdHlwZTogInJhZGlvIiwgaWQ6ICJyYWRpbzEwMiIgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jaGVjay1sYWJlbCBkYXJrLWdyZXktdGV4dCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgZm9yOiAicmFkaW8xMDIiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiUmVkIildCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}